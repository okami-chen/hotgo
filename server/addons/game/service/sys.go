// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package service

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"hotgo/addons/game/model"
	"hotgo/addons/game/model/input/sysin"
	"hotgo/internal/library/hgorm/handler"
)

type (
	ISysConfig interface {
		GetBasic(ctx context.Context) (conf *model.BasicConfig, err error)
		GetConfigByGroup(ctx context.Context, in *sysin.GetConfigInp) (res *sysin.GetConfigModel, err error)
		UpdateConfigByGroup(ctx context.Context, in *sysin.UpdateConfigInp) error
	}
	ISysIndex interface {
		Test(ctx context.Context, in *sysin.IndexTestInp) (res *sysin.IndexTestModel, err error)
	}
	ISysDevice interface {
		// Model 设备ORM模型
		Model(ctx context.Context, option ...*handler.Option) *gdb.Model
		// List 获取设备列表
		List(ctx context.Context, in *sysin.DeviceListInp) (list []*sysin.DeviceListModel, totalCount int, err error)
		// Export 导出设备
		Export(ctx context.Context, in *sysin.DeviceListInp) (err error)
		// Edit 修改/新增设备
		Edit(ctx context.Context, in *sysin.DeviceEditInp) (err error)
		// Delete 删除设备
		Delete(ctx context.Context, in *sysin.DeviceDeleteInp) (err error)
		// MaxSort 获取设备最大排序
		MaxSort(ctx context.Context, in *sysin.DeviceMaxSortInp) (res *sysin.DeviceMaxSortModel, err error)
		// View 获取设备指定信息
		View(ctx context.Context, in *sysin.DeviceViewInp) (res *sysin.DeviceViewModel, err error)
		// Status 更新设备状态
		Status(ctx context.Context, in *sysin.DeviceStatusInp) (err error)
	}
	ISysGame interface {
		// Model 游戏ORM模型
		Model(ctx context.Context, option ...*handler.Option) *gdb.Model
		// List 获取游戏列表
		List(ctx context.Context, in *sysin.GameListInp) (list []*sysin.GameListModel, totalCount int, err error)
		// Export 导出游戏
		Export(ctx context.Context, in *sysin.GameListInp) (err error)
		// Edit 修改/新增游戏
		Edit(ctx context.Context, in *sysin.GameEditInp) (err error)
		// Delete 删除游戏
		Delete(ctx context.Context, in *sysin.GameDeleteInp) (err error)
		// MaxSort 获取游戏最大排序
		MaxSort(ctx context.Context, in *sysin.GameMaxSortInp) (res *sysin.GameMaxSortModel, err error)
		// View 获取游戏指定信息
		View(ctx context.Context, in *sysin.GameViewInp) (res *sysin.GameViewModel, err error)
		// Status 更新游戏状态
		Status(ctx context.Context, in *sysin.GameStatusInp) (err error)
	}
)

var (
	localSysConfig ISysConfig
	localSysIndex  ISysIndex
	localSysDevice   ISysDevice
	localSysGame     ISysGame
)

func SysConfig() ISysConfig {
	if localSysConfig == nil {
		panic("implement not found for interface ISysConfig, forgot register?")
	}
	return localSysConfig
}

func RegisterSysConfig(i ISysConfig) {
	localSysConfig = i
}

func SysIndex() ISysIndex {
	if localSysIndex == nil {
		panic("implement not found for interface ISysIndex, forgot register?")
	}
	return localSysIndex
}

func RegisterSysIndex(i ISysIndex) {
	localSysIndex = i
}
func SysDevice() ISysDevice {
	if localSysDevice == nil {
		panic("implement not found for interface ISysDevice, forgot register?")
	}
	return localSysDevice
}

func RegisterSysDevice(i ISysDevice) {
	localSysDevice = i
}

func SysGame() ISysGame {
	if localSysGame == nil {
		panic("implement not found for interface ISysGame, forgot register?")
	}
	return localSysGame
}

func RegisterSysGame(i ISysGame) {
	localSysGame = i
}
